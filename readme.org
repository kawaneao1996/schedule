* 目的
自分用の暦・スケジュールを読むためのアプリを作る。
機能としては予定の入力、それに対する簡単なフィードバック（感想・日記）の入力、
月齢の表示、太陽の状態の表示を目標にする。
* 手段
本当はswiftでiOSアプリを作る予定だったが、xcodeのインストールのために
Macのアップデートが必要であり、そのための15ギガの容量を確保するのが難しいので
pythonのDjangoを使ってみようと思う。
* 仮想環境
なんか設定が他のwebサイトに干渉しないため（？）に仮想環境（virtual environment : virtualenv）を
この/Users/matsuoyoshihiro/programming/python/web/schedule に設定する。
手順はチュートリアルの通り。
1. python3 -m venv myenv
2. source myenv/bin/activate
3. python -m pip install --upgrade pip
4. (emacsで/schedule/にrequirements.txt作成)
   そこに次を書き込む
   Django~=3.2.10
5. pip install -r requirements.txt
6. (PythonAnywhereに登録)
7. django-admin startproject mysite .
8. （settings.pyの編集）
   1. TIME_ZONE = 'Asia/Tokyo'
   2. LANGUAGE_CODE = 'ja'
   3. STATIC_URL = '/static/'
      STATIC_ROOT = os.path.join(BASE_DIR, 'static')
   4. ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']
9. python3 manage.py migrate
   - ここでエラー：settings.pyに
     import os
     を追記
10. python3 manage.py runserver
    
* コンテンツを作る
オブジェクト指向とは、実際のものをプロパティ（オブジェクト・プロパティ）とメソッドを使って
表現する方法。

** ブログポストに必要なもの
タイトル、コンテンツ、作成者、ポストをいつ作成したか、いつ公開したか　：プロパティ
ポスト（publish）　：メソッド

DjangoのデータベースはSQLite

** アプリケーションの作成

*** デプロイ

1. 仮想環境構築
   1) python3 -m venv myenv :仮想環境の構築
   2) source myenv/bin/activate :仮想環境の構築
   3) python manage.py startapp blog
   4) mysite/settings.py のINSTALLED_APPSに
      'blog.apps.BlogConfig',
      を追記
   5) blog/model.py を削除してコード記入
      #+BEGIN_SRC Python3
      from django.conf import settings
      from django.db import models
      from django.utils import timezone


      class Post(models.Model):
          author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
          title = models.CharField(max_length=200)
          text = models.TextField()
          created_date = models.DateTimeField(default=timezone.now)
          published_date = models.DateTimeField(blank=True, null=True)

          def publish(self):
               self.published_date = timezone.now()
               self.save()

          def __str__(self):
              return self.title
       #+END_SRC
   6) ターミナルで新しいモデルをDjangoに知らせる
   7) python manage.py makemigrations blog

   8) python manage.py migrate blog

   9) 作成したポストを追加、編集、削除するのにdjango adminを使う
      blog/admin.py に以下を記述
      #+BEGIN_SRC
      from django.contrib import admin
      from .models import Post

      admin.site.register(Post)
      #+END_SRC
   
   10) webサーバーを立ち上げる
       python manage.py runserver

   11) http://127.0.0.1:8000/admin/  にアクセス

   12) 仮想環境で
       python manage.py createsuperuser

2. Gitの作業

   1) Gitを立ち上げる schedule/ 内で
      git init

   2) .gitignore に

      *.pyc
      *~
      /.vscode
      __pycache__
      myvenv
      db.sqlite3
      /static
      .DS_Store

      を記述

   3) git add --all

   4) git commit -m "My schedule app, first commit"

   5) git remote add origin [URL]

   6) git push -u origin master :gitの作業ここまで

3. PythonAnywhereの設定

   1) PythonAnywhereのbashコンソールに以下を入力：
      pip3 install --user pythonanywhere

   2) pa_autoconfigure_django.py --python=3.6 [Github URL]

      + やっていること      
	- GitHubからコードをダウンロードする
	- ちょうどあなたのPC上でやったように、PythonAnywhere上に仮想環境 を作成する
	- 一部のデプロイメント設定で設定ファイルを更新する
	- manage.py migrateコマンドを使ってPythonAnywhere上のデータベースをセットアップする
	- 静的ファイルの設定（これについては後で学習します）
	- APIを通じてPythonAnywhereがあなたのWebアプリケーションを提供するように設定する
   3) PythonAnywhere上のデータベースが、自分のPC上のデータベースとはまったく別物であることです。つまり、異なる投稿と管理者アカウントを持つことができます。 その結果、自分のコンピュータで行ったように、createsuperuserで管理者アカウントを初期化する必要があります。
      python manage.py createsuperuser
4. これからローカルで作業をして、Git にpush、するとwebページに反映される。

* <2022-04-10 日>
** Djangoのチュートリアル
https://tutorial.djangogirls.org/ja/installation/#pythonanywhere


